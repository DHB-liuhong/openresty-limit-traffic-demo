worker_processes  1;
error_log logs/error.log debug;

events {
	worker_connections 1024;
}

http {
	lua_shared_dict limit_conn_store 100M;
	lua_shared_dict limit_count_store 100m;
	lua_shared_dict limit_req_store 100m;
  	init_by_lua_block {
        	require "resty.core"
    	}
	lua_package_path 'conf/?.lua;;';
	lua_code_cache on;
	upstream apache.org {
		server apache.org;
	}

	upstream nginx.org {
		server nginx.org;
	}

	log_format  main  '$remote_addr - $remote_user [$time_local-$msec] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
	
	server {
		listen 8080;
		access_log logs/access.log main;

		location = /limitInner {
			content_by_lua '
				ngx.say("hello, its success!")
				';
		} 
		
# 限流测试-1.限制单IP并发数		
		location = /limitConcurrency {
			access_by_lua_file conf/access_limit_conn.lua;
			content_by_lua '
				ngx.say("真实IP", ngx.var.binary_remote_addr)
				ngx.sleep(2)
				ngx.say("hello, its success!")
				';
			log_by_lua_file conf/log_limit_conn.lua;
		}

# 限流测试-2.限制单IP时间段内调用频次-允许一次性通过时间段内最大请求数
		location = /limitFrequency {
			access_by_lua_file conf/access_limit_frequency.lua;
			proxy_pass http://127.0.0.1:8080/limitInner;
		    proxy_set_header Host $host;
		    proxy_redirect off;
		    proxy_set_header X-Real-IP $remote_addr;
		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		    proxy_connect_timeout 60;
		    proxy_read_timeout 600;
		    proxy_send_timeout 600;
		}

# 限流测试-3.	平滑限制单IP时间段内调用频次-允许突发，但请求依然是平均分配请求到每个时间点	
		location = /limitFrequencyLeakyBucket {
			access_by_lua_file conf/access_limit_frequency_leaky_bucket.lua;
			proxy_pass http://127.0.0.1:8080/limitInner;
		    proxy_set_header Host $host;
		    proxy_redirect off;
		    proxy_set_header X-Real-IP $remote_addr;
		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		    proxy_connect_timeout 60;
		    proxy_read_timeout 600;
		    proxy_send_timeout 600;
		}

# 限流测试-4.	平滑限制单IP时间段内调用频次-允许突发，每秒最大通过数=？		
		location = /limitFrequencyTokenBucket {
			access_by_lua_file conf/access_limit_frequency_token_bucket.lua;
			proxy_pass http://127.0.0.1:8080/limitInner;
		    proxy_set_header Host $host;
		    proxy_redirect off;
		    proxy_set_header X-Real-IP $remote_addr;
		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		    proxy_connect_timeout 60;
		    proxy_read_timeout 600;
		    proxy_send_timeout 600;
		}	

# 限流测试-5.	平滑限制单IP时间段内调用频次-不允许突发，每秒最大通过数=速率*1秒。	
		location = /limitFrequencyTokenBucketAvg {
			access_by_lua_file conf/access_limit_frequency_token_bucket_avg.lua;
			proxy_pass http://127.0.0.1:8080/limitInner;
		    proxy_set_header Host $host;
		    proxy_redirect off;
		    proxy_set_header X-Real-IP $remote_addr;
		    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		    proxy_connect_timeout 60;
		    proxy_read_timeout 600;
		    proxy_send_timeout 600;
		}		

	}	
}
