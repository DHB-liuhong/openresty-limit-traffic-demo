worker_processes  1;
error_log logs/error.log debug;

events {
	worker_connections 1024;
}

http {
	lua_package_path 'conf/?.lua;;';

	upstream apache.org {
		server apache.org;
	}

	upstream nginx.org {
		server nginx.org;
	}

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	server {
		listen 8080;

		access_log logs/access.log main;

		# 测试：利用lua rocks 打包模块功能
		location = /luarocks {
			content_by_lua '
				local foo = require("foo")
				foo.say("hello luarocks, This message is from to luarocks!")
			';
		}

		# 测试：请求处理阶段顺序
		location = /mixed {
    		set_by_lua $a 'ngx.log(ngx.ERR, "set_by_lua")';
    		rewrite_by_lua 'ngx.log(ngx.ERR, "rewrite_by_lua")';
    		access_by_lua 'ngx.log(ngx.ERR, "access_by_lua")';
    		header_filter_by_lua 'ngx.log(ngx.ERR, "header_filter_by_lua")';
    		body_filter_by_lua 'ngx.log(ngx.ERR, "body_filter_by_lua")';
    		log_by_lua 'ngx.log(ngx.ERR, "log_by_lua")';
    		content_by_lua 'ngx.log(ngx.ERR, "content_by_lua")';
		}

		# 测试：设置用户自定义全局参数
		location = /test_custom_param {
			set $my_param "this is user param!";
			echo "my_param: $my_param";
		}

		# 测试：输出nginx內建变量
		location = /test_inner_variables {
        	echo "uri = $uri";
        	echo "request_uri = $request_uri";
        	echo "Get value from url param, name = $arg_name ";
    	}

    	# 测试：配置指令执行顺序之rewrite在content之前
    	location =/test_command_squence{
    		set $a 32;
    		echo $a;
    		set $a 50;
    		echo $a;
    	}
	}
}